[extension_name]
Heat
[extension_info]
clickmap but free (and works)
[insert_external]
[insert_command]
/*
* SAMMI Heat Bridge by prodzpod
* 
* How to Use: 
* Download this extension and restart SAMMI.
* Enable [GreenHeat](http://heat.prod.kr/) or [Legacy Heat](https://heat.j38.net/) in your Twitch channel. check the greenheat site for its websocket syntax.
* OBS Folders are janky and might not work with the heatmap system (use nested scenes instead.)
* 
* Commands
* *Heat: Add Source*: adds an OBS input source as a heatmap object.
* *Heat: Remove Clickmap*: removes a heatmap object by name.
*
* Parameters
* *name*: name of the heatmap object, used to identify uniquely between each objects.
* *x, y, w, h*: the dimensions of the object.
* *z/depth*: the depth of the object. if multiple objects of same depth is present, all will be clicked at once. If there is multiple objects stacked with different depths, only the highest one will be clicked.
* *Detection Type*: whether to respond to all events or only certain events.
*
* Triggers
* *Heat Click* / *Heat Hover* / *Heat Drag* / *Heat Release*: Triggered whenever a greenheat message is recieved, whether it clicked on a defined clickmap or not. useful for screen-wide events.
*   - *channel*: the channel id the heat message originated from.
*   - *id*: the twitch id (or the opaque id) of a user.
*   - *type*: the type of detection. is either "click", "hover", "drag" or "release".
*   - *x* / *y*: The coordinates of the click.
*   - *button*: Mouse button used to perform this action. defaults to "left", but can also be "middle" or "right".
*   - *ctrl* / *shift* / *alt*: whether modifier keys were pressed during clicks.
*   - *time*: the latency-compensated time of click.
*   - *latency*: the latency between the click and stream delay.
*   - *isAnonymous*: whether the id is opaque or real twitch id. only non-anonymous accounts can be queried for names or colors.
* *Heat Clickmap*: used when a clickmap detects a click of some kind. contains all the pull values of *Heat Click* as well as extra values described below.
*   - *name*: name of the heatmap that was clicked. 
*   - *local_x* / *local_y*: clicked position relative to the object. [0,0] would be clicking the object's top-left corner, while [1,1] would be bottom right.
*/
SAMMI.extCommand("Heat: Save Heatmap", 3355443, 52, { 'file': ['File Name', 22, 'heatmap.json'] });
SAMMI.extCommand("Heat: Load Heatmap", 3355443, 52, { 
    'file': ['File Name', 22, 'heatmap.json'], 
    'output': ['Save Variable As', 14, ''], 
});
SAMMI.extCommand("Heat: Add Source to Heatmap", 3355443, 52, { 
    'name': ['Name', 14, ''], 
    'scene': ['Scene', 4, ''],
    'source': ['Source', 5, ''],
    'z': ['Depth', 15, 0],
    'type': ['Detection Type', 19, 'Click Only', null, ['Click Only', 'Click and Release', 'Click, Release and Drag', 'Hover and Click', 'All']],
    'output': ['Save Variable As', 14, ''], 
});
SAMMI.extCommand("Heat: Remove Source from Heatmap", 3355443, 52, { 
    'name': ['Name', 14, ''],
    'output': ['Save Variable As', 14, ''], 
});
(async () => {
    await PROD_SAMMIHEAT_LOAD("heatmap_backup.json");
    const useLegacyHeat = (await SAMMI.getVariable("UseLegacyHeat", "SAMMIHeat_Config")).Value
    const twitchList = (await SAMMI.getTwitchList()).twitch_list
    for (const k in twitchList) {
        if (k === "clientId") continue;
        const url = useLegacyHeat ? `wss://heat-api.j38.net/channel/${k}` : `wss://heat.prod.kr/${twitchList[k].login}`;
        PROD_SAMMIHEAT_WS_INIT(url, k);
    }
})();
[insert_hook]
case "Heat: Save Heatmap": { PROD_SAMMIHEAT_SAVE(SAMMIJSON.file) } break;
case "Heat: Load Heatmap": { PROD_SAMMI_APPLY(PROD_SAMMIHEAT_LOAD, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.instanceId, SAMMIJSON.file) } break;
case "Heat: Add Source to Heatmap": { PROD_SAMMI_APPLY(PROD_SAMMIHEAT_ADD_SOURCE, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.instanceId, SAMMIJSON); } break;
case "Heat: Remove Source from Heatmap": { PROD_SAMMI_APPLY(PROD_SAMMIHEAT_DELETE_SOURCE, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.instanceId, SAMMIJSON.name); } break;
[insert_script]
let PROD_SAMMIHEAT_HEATMAP = {};
async function PROD_SAMMIHEAT_SAVE(file) {
    await SAMMI.setVariable("file", file, "SAMMIHeat_Save");
    await SAMMI.setVariable("heatmap", PROD_SAMMIHEAT_HEATMAP, "SAMMIHeat_Save");
    await SAMMI.triggerButton("SAMMIHeat_Save");
}
async function PROD_SAMMIHEAT_LOAD(file) {
    await SAMMI.setVariable("file", file, "SAMMIHeat_Load");
    await SAMMI.triggerButton("SAMMIHeat_Load");
    PROD_SAMMIHEAT_HEATMAP = JSON.parse((await SAMMI.getVariable("string", "SAMMIHeat_Load")).Value);
    return PROD_SAMMIHEAT_HEATMAP;
}
async function PROD_SAMMIHEAT_ADD_SOURCE(json) {
    console.log(json);
    PROD_SAMMIHEAT_HEATMAP[json.z] ??= [];
    PROD_SAMMIHEAT_HEATMAP[json.z].push({
        name: json.name,
        scene: json.scene,
        source: json.source,
        type: json.type
    });
    await PROD_SAMMIHEAT_SAVE("heatmap_backup.json");
    return PROD_SAMMIHEAT_HEATMAP;
}
async function PROD_SAMMIHEAT_DELETE_SOURCE(name) {
    delete PROD_SAMMIHEAT_HEATMAP[name];
    await PROD_SAMMIHEAT_SAVE("heatmap_backup.json");
    return PROD_SAMMIHEAT_HEATMAP;
}
function PROD_SAMMI_APPLY(fn, output, btn, instance, ...input) { if (output !== "") SAMMI.setVariable(output, fn(...input), btn, instance); }
let PROD_SAMMIHEAT_WS = {}
function PROD_SAMMIHEAT_WS_INIT(url, channel) {
    const ws = new WebSocket(url);
    ws.addEventListener("open", () => SAMMI.alert("Connected to: " + url));
    ws.addEventListener("message", m => {
        let message = JSON.parse(m.data);
        message.channel = channel;
        message.isAnonymous = message.id.startsWith("U") || message.id.startsWith("A");
        SAMMI.triggerExt("Heat " + (message.type[0].toUpperCase() + message.type.slice(1)), message);
        PROD_SAMMIHEAT_FINDCLICKMAP(message);
    });
    ws.addEventListener("close", () => {
        SAMMI.alert("Websocket Closed, Reconnecting: " + url);
        setTimeout(() => PROD_SAMMIHEAT_WS_INIT(url, channel), 500);
    });
    ws.addEventListener("error", e => {
        SAMMI.alert("Websocket Crashed, Reconnecting: " + url);
        setTimeout(() => PROD_SAMMIHEAT_WS_INIT(url, channel), 500);
    });
    PROD_SAMMIHEAT_WS[channel] = ws;
    return ws;
}
async function PROD_SAMMIHEAT_FINDCLICKMAP(message) {
    const sceneItems = await PROD_SAMMIHEAT_GETSCENEITEMS();
    const priorityList = Object.keys(PROD_SAMMIHEAT_HEATMAP).map(x => Number(x)).sort((a, b) => b - a)
    for (const z of priorityList) {
        let found = false;
        for (const item of PROD_SAMMIHEAT_HEATMAP[z]) {
            let acceptedClickType = ["click"];
            switch (item.type) {
                case 'Click, Release and Drag': acceptedClickType.push("drag");
                case 'Click and Release': acceptedClickType.push("release"); break;
                case 'Hover and Click': acceptedClickType.push("hover"); break;
            }
            if (item.type !== "All" && !acceptedClickType.includes(message.type)) continue;
            const transform = sceneItems[item.source];
            if (!transform || transform.scene !== item.scene) continue;
            const hit = checkHitbox(transform, message);
            if (!hit) continue;
            let newMessage = JSON.parse(JSON.stringify(message));
            newMessage.name = item.name;
            newMessage.local_x = hit.x;
            newMessage.local_y = hit.y;
            SAMMI.triggerExt("Heat Clickmap", newMessage);
            found = true;
        }
        if (found) return;
    }
    function checkHitbox(transform, message) {
        let x = message.x - transform.x;
        let y = message.y - transform.y;
        if (transform.angle !== 0) {
            let r = Math.hypot(x, y);
            let a = Math.atan2(y, x);
            x = r * Math.cos(a + transform.angle);
            y = r * Math.sin(a + transform.angle);
        }
        x = (x / transform.width) + 0.5;
        y = (y / transform.height) + 0.5;
        if (0 <= x && x <= 1 && 0 <= y && y <= 1) return {x: x, y: y};
        return null;
    }
}
let PROD_SAMMIHEAT_SCENEITEMS = {}; // cache
let PROD_SAMMIHEAT_SCENEITEMS_NEXT_CHECK = 0;
let PROD_SAMMIHEAT_SCENEITEMS_BUSY = false;
async function PROD_SAMMIHEAT_GETSCENEITEMS() {
    const NOW = Date.now();
    if (NOW < PROD_SAMMIHEAT_SCENEITEMS_NEXT_CHECK || PROD_SAMMIHEAT_SCENEITEMS_BUSY) return PROD_SAMMIHEAT_SCENEITEMS;
    PROD_SAMMIHEAT_SCENEITEMS_BUSY = true;
    PROD_SAMMIHEAT_SCENEITEMS_NEXT_CHECK = NOW + ((await SAMMI.getVariable("UpdateInterval", "SAMMIHeat_Config")).Value * 1000);
    const currentScene = (await SAMMI.getVariable("Main.current_scene", "global")).Value
    const scenes = (await PROD_SAMMIHEAT_GETSCENELIST()).map(x => x.sceneName);
    const resolution = await PROD_SAMMIHEAT_GETRESOLUTION();
    const GLOBAL_TRANSFORM = { x: resolution.width / 2, y: resolution.height / 2, width: resolution.width, height: resolution.height, angle: 0 };
    function convertToHitbox(transform) {
        let ret = {};
        const diagR = Math.hypot(transform.width, transform.height);
        const diagA = Math.atan2(transform.height, transform.width);
        ret.x = transform.positionX + (diagR / 2 * Math.cos(diagA + (transform.rotation / 180 * Math.PI)));
        ret.y = transform.positionY + (diagR / 2 * Math.sin(diagA + (transform.rotation / 180 * Math.PI)));
        ret.width = transform.width;
        ret.height = transform.height;
        ret.angle = transform.rotation;
        return ret;
    }
    function mergeTransforms(item, reference) {
        // apply the transform from (GLOBAL_TRANSFORM -> reference) to item
        // scale down
        item.x *= reference.width / GLOBAL_TRANSFORM.width;
        item.y *= reference.height / GLOBAL_TRANSFORM.height;
        item.width *= reference.width / GLOBAL_TRANSFORM.width;
        item.height *= reference.height / GLOBAL_TRANSFORM.height;
        // recenter
        item.x += (GLOBAL_TRANSFORM.width - reference.width) / 2
        item.y += (GLOBAL_TRANSFORM.height - reference.height) / 2
        // translate
        item.x += reference.x - GLOBAL_TRANSFORM.x
        item.y += reference.y - GLOBAL_TRANSFORM.y
        // rotate
        if (reference.angle !== 0) {
            item.angle += reference.angle;
            item.x -= reference.x;
            item.y -= reference.y;
            let r = Math.hypot(item.x, item.y);
            let a = Math.atan2(item.y, item.x);
            item.x = r * Math.cos(a + reference.angle);
            item.y = r * Math.sin(a + reference.angle);
            item.x += reference.x;
            item.y += reference.y;
        }
        return item;
    }
    let visited = [];
    async function loop(scene, transform) {
        if (visited.includes(scene)) return {}; visited.push(scene);
        let ret = {};
        const items = await PROD_SAMMIHEAT_GETSCENEITEMLIST(scene);
        for (const item of items) {
            if (!item.sceneItemEnabled) continue;
            const hitbox = convertToHitbox(item.sceneItemTransform);
            if (hitbox.width === 0 || hitbox.height === 0) continue;
            hitbox.scene = scene;
            ret[item.sourceName] = hitbox;
            if (scenes.includes(item.sourceName)) {
                const subret = await loop(item.sourceName, ret[item.sourceName]);
                ret = Object.assign(ret, subret);
            }
        }
        for (const k in ret) ret[k] = mergeTransforms(ret[k], transform);
        return ret;
    }
    PROD_SAMMIHEAT_SCENEITEMS = await loop(currentScene, GLOBAL_TRANSFORM);
    for (const k in PROD_SAMMIHEAT_SCENEITEMS) PROD_SAMMIHEAT_SCENEITEMS[k] = mergeTransforms(PROD_SAMMIHEAT_SCENEITEMS[k], {x: 0.5, y: 0.5, width: 1, height: 1, angle: 0});
    PROD_SAMMIHEAT_SCENEITEMS_BUSY = false;
    return PROD_SAMMIHEAT_SCENEITEMS;
}
async function PROD_SAMMIHEAT_GETRESOLUTION() {
    await SAMMI.triggerButton("SAMMIHeat_GetVideoSettings");
    const json = JSON.parse((await SAMMI.getVariable("string", "SAMMIHeat_GetVideoSettings")).Value)
    return { width: json.responseData.baseWidth, height: json.responseData.baseHeight };
}
async function PROD_SAMMIHEAT_GETSCENELIST() {
    await SAMMI.triggerButton("SAMMIHeat_GetSceneList");
    const txt = await PROD_SAMMIHEAT_CHUNKDOWNLOAD("string", "SAMMIHeat_GetSceneList")
    return JSON.parse(txt).responseData.scenes;
}
async function PROD_SAMMIHEAT_GETSCENEITEMLIST(scene) {
    await SAMMI.setVariable("scene", scene, "SAMMIHeat_GetSceneItemList");
    await SAMMI.triggerButton("SAMMIHeat_GetSceneItemList");
    const txt = await PROD_SAMMIHEAT_CHUNKDOWNLOAD("string", "SAMMIHeat_GetSceneItemList");
    return JSON.parse(txt).responseData.sceneItems;
}
async function PROD_SAMMIHEAT_CHUNKDOWNLOAD(key, button) {
    while (!(await SAMMI.getVariable("length", button)).Value) {}
    const CHUNKS = (await SAMMI.getVariable("length", button)).Value / (await SAMMI.getVariable("CHUNK_SIZE", button)).Value;
    let txt = "";
    for (let i = 0; i < CHUNKS; i++) txt += (await SAMMI.getVariable(key + "-" + i, button)).Value;
    return txt;
}
[insert_over]
{ "deck_data": "{ \"background_color\": 0.0, \"on\": true, \"grid_y\": 5.0, \"snap_grid\": 1.0, \"lb_version\": \"2025.2.0\", \"background_image\": \"\", \"sammi_version\": \"2025.2.0\", \"encrypted\": false, \"adaptive_resizing\": 1.0, \"unique_id\": \"20251014071652415229018\", \"button_list\": [ { \"color\": 0.0, \"persistent\": 1.0, \"text\": \"do not\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"ret\" }, { \"b1\": \"exists\", \"cmd\": 220.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"\\\/$file$\\\/\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \"==\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 7.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"v1\": 1.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 2.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"exists\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"true\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"v0\": 2.0, \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 }, { \"b1\": \"_ret\", \"cmd\": 256.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"\\\/$file$\\\/\", \"v0\": 1.0 }, { \"b1\": \"\\\/$_ret$\\\/\", \"cmd\": 168.0, \"obsid\": \"Main\", \"pos\": 4.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"ret\", \"v0\": 0.0 }, { \"cmd\": 16.0, \"obsid\": \"Main\", \"pos\": 5.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"ret\" }, { \"b1\": \"ret\", \"cmd\": 18.0, \"obsid\": \"Main\", \"pos\": 6.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"string\" }, { \"cmd\": 142.0, \"obsid\": \"Main\", \"pos\": 7.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Heatmap Loaded!\" } ], \"press_type\": 0.0, \"x\": 0.20000000000000001110223024625157, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 11.0, \"width\": 0.20000000000000001110223024625157, \"button_id\": \"SAMMIHeat_Load\", \"button_duration\": 0.0, \"y\": 0.80000000000000004440892098500626, \"switch_deck\": \"\", \"height\": 0.20000000000000001110223024625157, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 0.0, \"persistent\": 1.0, \"text\": \"please\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"b1\": \"heatmap\", \"cmd\": 18.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"_heatmap\" }, { \"b1\": \"\\\/$_heatmap$\\\/\", \"cmd\": 255.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"\\\/$file$\\\/\", \"v0\": 1.0 }, { \"cmd\": 142.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"Heatmap Saved!\" } ], \"press_type\": 0.0, \"x\": 0.0, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 11.0, \"width\": 0.20000000000000001110223024625157, \"button_id\": \"SAMMIHeat_Save\", \"button_duration\": 0.0, \"y\": 0.80000000000000004440892098500626, \"switch_deck\": \"\", \"height\": 0.20000000000000001110223024625157, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 1625856.0, \"persistent\": 1.0, \"text\": \"Edit This Button\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 19.0, \"b0\": \"change UseLegacyHeat to true if youre using heat.j38.net and not GreenHeat\\nUpdateInterval: how often the scene tree is fetched from OBS (in seconds)\", \"v0\": 2.0 }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"UseLegacyHeat\", \"b2\": \"false\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"UpdateInterval\", \"b2\": \"0.5\" } ], \"press_type\": 0.0, \"x\": 0.0, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 11.0, \"width\": 1.0, \"button_id\": \"SAMMIHeat_Config\", \"button_duration\": 0.0, \"y\": 0.0, \"switch_deck\": \"\", \"height\": 0.80000000000000004440892098500626, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 0.0, \"persistent\": 1.0, \"text\": \"anything\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"ret\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"length\" }, { \"b1\": \"\", \"cmd\": 65.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 148.0, \"b0\": \"{\\n  \\\"op\\\": 6,\\n  \\\"d\\\": {\\n    \\\"requestType\\\": \\\"GetSceneItemList\\\",\\n    \\\"requestData\\\": {\\n        \\\"sceneName\\\":\\\"\\\/$scene$\\\/\\\"\\n  }\\n}\\n}\", \"b2\": \"ret\" }, { \"b1\": \"3000\", \"cmd\": 153.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"ret\" }, { \"b1\": \"ret\", \"cmd\": 18.0, \"obsid\": \"Main\", \"pos\": 4.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"string\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 5.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"CHUNK DOWNLOAD (sammi side): store as \\\"string\\\"\", \"v0\": 7.0 }, { \"b1\": \"\\\/$string$\\\/\", \"cmd\": 83.0, \"obsid\": \"Main\", \"pos\": 6.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"length\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 7.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"i\", \"b2\": \"0\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 8.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"CHUNK_SIZE\", \"b2\": \"1000\" }, { \"cmd\": 9.0, \"obsid\": \"Main\", \"pos\": 9.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"length\", \"v0\": 3.0 }, { \"b1\": \"\\\/$string$\\\/\", \"b3\": \"CHUNK_SIZE\", \"cmd\": 93.0, \"obsid\": \"Main\", \"pos\": 10.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"string-\\\/$(i \\\/ CHUNK_SIZE)$\\\/\", \"b2\": \"(i + 1)\" }, { \"b1\": \"+=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 11.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"i\", \"b2\": \"CHUNK_SIZE\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \">=\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 11.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 12.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"i\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"length\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 } ], \"press_type\": 0.0, \"x\": 0.59999999999999997779553950749687, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 11.0, \"width\": 0.20000000000000001110223024625157, \"button_id\": \"SAMMIHeat_GetSceneItemList\", \"button_duration\": 0.0, \"y\": 0.80000000000000004440892098500626, \"switch_deck\": \"\", \"height\": 0.20000000000000001110223024625157, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 0.0, \"persistent\": 1.0, \"text\": \"modify\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"ret\" }, { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"length\" }, { \"b1\": \"\", \"cmd\": 65.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"{\\n  \\\"op\\\": 6,\\n  \\\"d\\\": {\\n    \\\"requestType\\\": \\\"GetSceneList\\\"\\n  }\\n}\", \"b2\": \"ret\" }, { \"b1\": \"3000\", \"cmd\": 153.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"ret\" }, { \"b1\": \"ret\", \"cmd\": 18.0, \"obsid\": \"Main\", \"pos\": 4.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"string\" }, { \"cmd\": 6.0, \"obsid\": \"Main\", \"pos\": 5.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"CHUNK DOWNLOAD (sammi side): store as \\\"string\\\"\", \"v0\": 7.0 }, { \"b1\": \"\\\/$string$\\\/\", \"cmd\": 83.0, \"obsid\": \"Main\", \"pos\": 6.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"length\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 7.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"i\", \"b2\": \"0\" }, { \"b1\": \"=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 8.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"CHUNK_SIZE\", \"b2\": \"1000\" }, { \"cmd\": 9.0, \"obsid\": \"Main\", \"pos\": 9.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"length\", \"v0\": 3.0 }, { \"b1\": \"\\\/$string$\\\/\", \"b3\": \"CHUNK_SIZE\", \"cmd\": 93.0, \"obsid\": \"Main\", \"pos\": 10.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"string-\\\/$(i \\\/ CHUNK_SIZE)$\\\/\", \"b2\": \"(i + 1)\" }, { \"b1\": \"+=\", \"cmd\": 15.0, \"obsid\": \"Main\", \"pos\": 11.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"i\", \"b2\": \"CHUNK_SIZE\" }, { \"b53\": \"\", \"b5\": \"\", \"b13\": \"==\", \"v14\": 0.0, \"b36\": \"\", \"b38\": \"\", \"v10\": 0.0, \"b32\": \"\", \"b19\": \"==\", \"b57\": \"\", \"b59\": \"\", \"b17\": \"\", \"b1\": \">=\", \"v18\": 0.0, \"v16\": 0.0, \"b34\": \"==\", \"b7\": \"==\", \"b11\": \"\", \"b9\": \"\", \"b51\": \"\", \"b15\": \"\", \"b3\": \"\", \"b55\": \"==\", \"v12\": 0.0, \"cmd\": 11.0, \"b30\": \"\", \"b43\": \"==\", \"v21\": 0.0, \"b26\": \"\", \"b28\": \"==\", \"obsid\": \"Main\", \"b22\": \"==\", \"pos\": 12.0, \"v5\": 0.0, \"b47\": \"\", \"b49\": \"==\", \"v3\": 0.0, \"vis\": 1.0, \"b24\": \"\", \"ms\": 0.0, \"b41\": \"\", \"sel\": false, \"b45\": \"\", \"v9\": 0.0, \"dis\": 0.0, \"xpan\": 0.0, \"b20\": \"\", \"v7\": 0.0, \"b33\": \"\", \"v11\": 0.0, \"b16\": \"==\", \"b0\": \"i\", \"b58\": \"==\", \"b56\": \"\", \"b18\": \"\", \"b4\": \"==\", \"b12\": \"\", \"b52\": \"==\", \"b39\": \"\", \"b37\": \"==\", \"v15\": 0.0, \"b54\": \"\", \"b14\": \"\", \"b2\": \"length\", \"b31\": \"==\", \"v13\": 0.0, \"b35\": \"\", \"v17\": 0.0, \"v19\": 0.0, \"b50\": \"\", \"b8\": \"\", \"b6\": \"\", \"b10\": \"==\", \"b23\": \"\", \"v4\": 0.0, \"b48\": \"\", \"b46\": \"==\", \"v20\": 0.0, \"b42\": \"\", \"b29\": \"\", \"b27\": \"\", \"b44\": \"\", \"b21\": \"\", \"v6\": 0.0, \"v8\": 0.0, \"v2\": 1.0, \"b25\": \"==\", \"b40\": \"==\", \"v22\": 0.0 } ], \"press_type\": 0.0, \"x\": 0.40000000000000002220446049250313, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 11.0, \"width\": 0.20000000000000001110223024625157, \"button_id\": \"SAMMIHeat_GetSceneList\", \"button_duration\": 0.0, \"y\": 0.80000000000000004440892098500626, \"switch_deck\": \"\", \"height\": 0.20000000000000001110223024625157, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 }, { \"color\": 0.0, \"persistent\": 1.0, \"text\": \"down here\", \"release_duration\": 0.0, \"queueable\": 0.0, \"command_list\": [ { \"cmd\": 78.0, \"obsid\": \"Main\", \"pos\": 0.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"ret\" }, { \"b1\": \"\", \"cmd\": 65.0, \"obsid\": \"Main\", \"pos\": 1.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"{\\n  \\\"op\\\": 6,\\n  \\\"d\\\": {\\n    \\\"requestType\\\": \\\"GetVideoSettings\\\"\\n  }\\n}\", \"b2\": \"ret\" }, { \"b1\": \"3000\", \"cmd\": 153.0, \"obsid\": \"Main\", \"pos\": 2.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"ret\" }, { \"b1\": \"ret\", \"cmd\": 18.0, \"obsid\": \"Main\", \"pos\": 3.0, \"vis\": 1.0, \"ms\": 0.0, \"sel\": false, \"dis\": 0.0, \"xpan\": 0.0, \"b0\": \"string\" } ], \"press_type\": 0.0, \"x\": 0.80000000000000004440892098500626, \"is_transparent\": 0.0, \"border\": 2.0, \"image\": \"\", \"triggers\": [ ], \"group_id\": \"\", \"overlappable\": 0.0, \"init_variable\": \"\", \"deck\": 11.0, \"width\": 0.20000000000000001110223024625157, \"button_id\": \"SAMMIHeat_GetVideoSettings\", \"button_duration\": 0.0, \"y\": 0.80000000000000004440892098500626, \"switch_deck\": \"\", \"height\": 0.20000000000000001110223024625157, \"release_list\": [ ], \"functions\": 65.0, \"stretch\": 0.0 } ], \"deck_name\": \"Heat\", \"grid_x\": 5.0, \"stretch\": 0.0 }", "unique_id": "20251014071652415229018", "include_image": { } }