[extension_name]
More Math
[extension_info]
exposes js math object from sammi (but in a user friendly way)
[insert_external]
[insert_command]
/*
* More Math by prodzpod
* 
* Commands
* *More Math: Constant*: returns a constant into the variable.
* *More Math: Absolute Value*: returns the positive number of the same value if the value is negative.
* *More Math: Sign*: returns 1, 0 or -1 depending on its sign.
* *More Math: Arc/Hyperbolic Sine/Cosine/Tangent*: Additional trigonometry functions.
* *More Math: Two-Argument Arc Tangent*: Returns an angle from (0, 0) to (x, y). note that the first argument is `y` and not `x`.
* *More Math: Cube Root*: returns a cube root of the number. cbrt(8) = 2.
* *More Math: Ceiling*: rounds up the number to the nearest integer.
* *More Math: Floor*: rounds down the number to the nearest integer.
* *More Math: Round*: rounds up if .5 or more or down the number to the nearest integer. 
* *More Math: Truncate*: rounds down the number to the nearest integer.
* *More Math: Exponentiate*: takes a number to an arbiturary power.
* *More Math: Get Hypotenuse*: returns a distance between (0, 0) and (a, b).
* *More Math: Get Array Hypotenuse*: returns the sum of square roots of each element in the list.
* *More Math: Log*: takes a number to an arbiturary logarithm.
* *More Math: Get Array Sum*: returns the sum of all elements in the array.
* *More Math: Max*: returns the larger value.
* *More Math: Get Array Max*: returns the largest element in the array.
* *More Math: Min*: returns the smaller value.
* *More Math: Get Array Min*: returns the smallest element in the array.
* *More Math: Round to Decimal Point*: rounds the number to specified decimal point. use negative number to round to 10s or more.
* *More Math: Mod to Positive Value*: takes a remainder that is always positive.
* *More Math: Anti-Linear Interpolation*: given a range and result value, find the "weight" of that result from Linear Interpolation. equivalent to ((t - a) / (b - a)).
*/
SAMMI.extCommand('More Math: Constant: E', 3355443, 52, { 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Constant: Pi', 3355443, 52, { 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Constant: ln(10)', 3355443, 52, { 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Constant: ln(2)', 3355443, 52, { 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Constant: log10(e)', 3355443, 52, { 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Constant: log2(e)', 3355443, 52, { 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Constant: Sqrt(1/2)', 3355443, 52, { 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Constant: Sqrt(2)', 3355443, 52, { 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Absolute Value', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Sign', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Arc Sine', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Arc Cosine', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Arc Tangent', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Hyperbolic Sine', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Hyperbolic Cosine', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Hyperbolic Tangent', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Hyperbolic Arc Sine', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Hyperbolic Arc Cosine', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Hyperbolic Arc Tangent', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Two-Argument Arc Tangent', 3355443, 52, { 'y': ['Y Value', 15, ''], 'x': ['X Value', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Cube Root', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Ceiling', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Floor', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Round', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Truncate', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Exponentiate', 3355443, 52, { 'base': ['Base', 15, ''], 'exponent': ['Exponent', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Get Hypotenuse', 3355443, 52, { 'a': ['Side A', 15, ''], 'b': ['Side B', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Get Array Hypotenuse', 3355443, 52, { 'arr': ['Array Variable', 14, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Log', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'base': ['Base', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Get Array Sum', 3355443, 52, { 'arr': ['Array Variable', 14, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Max', 3355443, 52, { 'a': ['Variable/Number/\'String\'', 15, ''], 'b': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Get Array Max', 3355443, 52, { 'arr': ['Array Variable', 14, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Min', 3355443, 52, { 'a': ['Variable/Number/\'String\'', 15, ''], 'b': ['Variable/Number/\'String\'', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Get Array Min', 3355443, 52, { 'arr': ['Array Variable', 14, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Round to Decimal Point', 3355443, 52, { 'input': ['Variable/Number/\'String\'', 15, ''], 'digit': ['Digits', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Mod to Positive Value', 3355443, 52, { 'denominator': ['Denominator', 15, ''], 'numerator': ['Numerator', 15, ''], 'output': ['Save Variable As', 14, ''] });
SAMMI.extCommand('More Math: Anti-Linear Interpolation', 3355443, 52, { 'x': ['Value', 15, ''], 'a': ['Minimum Value', 15, ''], 'b': ['Maximum Value', 15, ''], 'output': ['Save Variable As', 14, ''] });
[insert_hook]
case "More Math: Constant: E": { PROD_SAMMI_APPLY(() => Math.E, SAMMIJSON.output, SAMMIJSON.FromButton); } break
case "More Math: Constant: Pi": { PROD_SAMMI_APPLY(() => Math.PI, SAMMIJSON.output, SAMMIJSON.FromButton); } break
case "More Math: Constant: ln(10)": { PROD_SAMMI_APPLY(() => Math.LN10, SAMMIJSON.output, SAMMIJSON.FromButton); } break
case "More Math: Constant: ln(2)": { PROD_SAMMI_APPLY(() => Math.LN2, SAMMIJSON.output, SAMMIJSON.FromButton); } break
case "More Math: Constant: log10(e)": { PROD_SAMMI_APPLY(() => Math.LOG10E, SAMMIJSON.output, SAMMIJSON.FromButton); } break
case "More Math: Constant: log2(e)": { PROD_SAMMI_APPLY(() => Math.LOG2E, SAMMIJSON.output, SAMMIJSON.FromButton); } break
case "More Math: Constant: Sqrt(1/2)": { PROD_SAMMI_APPLY(() => Math.SQRT1_2, SAMMIJSON.output, SAMMIJSON.FromButton); } break
case "More Math: Constant: Sqrt(2)": { PROD_SAMMI_APPLY(() => Math.SQRT2, SAMMIJSON.output, SAMMIJSON.FromButton); } break
case "More Math: Absolute Value": { PROD_SAMMI_APPLY(Math.abs, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Sign": { PROD_SAMMI_APPLY(Math.sign, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Arc Sine": { PROD_SAMMI_APPLY(Math.asin, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Arc Cosine": { PROD_SAMMI_APPLY(Math.acos, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Arc Tangent": { PROD_SAMMI_APPLY(Math.atan, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Hyperbolic Sine": { PROD_SAMMI_APPLY(Math.sinh, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Hyperbolic Cosine": { PROD_SAMMI_APPLY(Math.cosh, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Hyperbolic Tangent": { PROD_SAMMI_APPLY(Math.tanh, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Hyperbolic Arc Sine": { PROD_SAMMI_APPLY(Math.asinh, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Hyperbolic Arc Cosine": { PROD_SAMMI_APPLY(Math.acosh, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Hyperbolic Arc Tangent": { PROD_SAMMI_APPLY(Math.atanh, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Two-Argument Arc Tangent": { PROD_SAMMI_APPLY(Math.atan2, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.y, SAMMIJSON.x); } break
case "More Math: Cube Root": { PROD_SAMMI_APPLY(Math.cbrt, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Ceiling": { PROD_SAMMI_APPLY(Math.ceil, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Floor": { PROD_SAMMI_APPLY(Math.floor, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Round": { PROD_SAMMI_APPLY(Math.round, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Truncate": { PROD_SAMMI_APPLY(Math.trunc, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input); } break
case "More Math: Exponentiate": { PROD_SAMMI_APPLY(Math.pow, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.base, SAMMIJSON.exponent); } break
case "More Math: Get Hypotenuse": { PROD_SAMMI_APPLY(Math.hypot, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.a, SAMMIJSON.b); } break
case "More Math: Get Array Hypotenuse": { SAMMI.getVariable(SAMMIJSON.arr, SAMMIJSON.FromButton).then(arr => PROD_SAMMI_APPLY(Math.hypot, SAMMIJSON.output, SAMMIJSON.FromButton, ...arr.value)); } break
case "More Math: Log": { PROD_SAMMI_APPLY((a, b) => Math.log(a) / Math.log(b), SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input, SAMMIJSON.base ?? Math.E); } break
case "More Math: Get Array Sum": { SAMMI.getVariable(SAMMIJSON.arr, SAMMIJSON.FromButton).then(arr => PROD_SAMMI_APPLY(a => a.reduce((a, b) => a + b, 0), SAMMIJSON.output, SAMMIJSON.FromButton, arr.value)); } break
case "More Math: Max": { PROD_SAMMI_APPLY(Math.max, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.a, SAMMIJSON.b); } break
case "More Math: Get Array Max": { SAMMI.getVariable(SAMMIJSON.arr, SAMMIJSON.FromButton).then(arr => PROD_SAMMI_APPLY(Math.max, SAMMIJSON.output, SAMMIJSON.FromButton, ...arr.value)); } break
case "More Math: Min": { PROD_SAMMI_APPLY(Math.min, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.a, SAMMIJSON.b); } break
case "More Math: Get Array Min": { SAMMI.getVariable(SAMMIJSON.arr, SAMMIJSON.FromButton).then(arr => PROD_SAMMI_APPLY(Math.min, SAMMIJSON.output, SAMMIJSON.FromButton, ...arr.value)); } break
case "More Math: Round to Decimal Point": { PROD_SAMMI_APPLY((n, a) => Math.round(n * Math.pow(10, a)) / Math.pow(10, a), SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.input, SAMMIJSON.digit ?? 6); } break
case "More Math: Mod to Positive Value": { PROD_SAMMI_APPLY((n, a) => ((n % a) + a) % a, SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.denominator, SAMMIJSON.numerator); } break
case "More Math: Anti-Linear Interpolation": { PROD_SAMMI_APPLY((x, a, b) => a === b ? 0.5 : ((b - x) / (a - b)), SAMMIJSON.output, SAMMIJSON.FromButton, SAMMIJSON.x, SAMMIJSON.a, SAMMIJSON.b); } break
[insert_script]
function PROD_SAMMI_APPLY(fn, output, btn, ...input) { if (output !== "") SAMMI.setVariable(output, fn(...input), btn); }
[insert_over]
